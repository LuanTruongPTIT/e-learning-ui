"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { 
  BookOpen, 
  CheckCircle, 
  Clock, 
  Calendar, 
  BarChart3, 
  PieChart, 
  Activity, 
  Award,
  Loader2,
  AlertCircle
} from "lucide-react";
import Link from "next/link";
import { EnrolledCourse } from "@/apis/student-courses";
import { 
  getStudentDashboardData, 
  getStudentDashboardStats,
  getRecentCourses,
  getUpcomingDeadlines,
  getRecentActivities,
  getProgressData,
  getWeeklyStudyData,
  getSubjectDistribution,
  DashboardData,
  DashboardStats,
  Activity as ActivityType,
  Deadline,
  ProgressData,
  StudyTimeData,
  SubjectDistribution
} from "@/apis/student-dashboard";
import { CourseProgressChart } from "@/components/dashboard/student/course-progress-chart";
import { WeeklyStudyChart } from "@/components/dashboard/student/weekly-study-chart";
import { SubjectDistributionChart } from "@/components/dashboard/student/subject-distribution-chart";
import { LearningActivityTimeline } from "@/components/dashboard/student/learning-activity-timeline";
import { RecentCourseCard } from "@/components/dashboard/student/recent-course-card";
import { UpcomingDeadlineCard } from "@/components/dashboard/student/upcoming-deadline-card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// Mock data for enrolled courses (will be replaced with API data)
const mockEnrolledCourses = [
  {
    id: "course-1",
    title: "Introduction to Web Development",
    description: "Learn the basics of HTML, CSS, and JavaScript to build modern websites.",
    thumbnail: "https://images.unsplash.com/photo-1593720213428-28a5b9e94613?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "John Doe",
    progress: 65,
    total_lectures: 24,
    completed_lectures: 16,
    last_accessed: "2023-06-15T10:30:00Z",
    category: "Web Development",
    status: "in_progress",
  },
  {
    id: "course-2",
    title: "Advanced JavaScript Programming",
    description: "Master JavaScript with advanced concepts like closures, promises, and async/await.",
    thumbnail: "https://images.unsplash.com/photo-1627398242454-45a1465c2479?q=80&w=2074&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "Jane Smith",
    progress: 30,
    total_lectures: 32,
    completed_lectures: 10,
    last_accessed: "2023-06-18T14:45:00Z",
    category: "Programming",
    status: "in_progress",
  },
  {
    id: "course-3",
    title: "Database Design and SQL",
    description: "Learn how to design efficient databases and write complex SQL queries.",
    thumbnail: "https://images.unsplash.com/photo-1489875347897-49f64b51c1f8?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "Robert Johnson",
    progress: 100,
    total_lectures: 18,
    completed_lectures: 18,
    last_accessed: "2023-06-10T09:15:00Z",
    category: "Database",
    status: "completed",
  },
  {
    id: "course-4",
    title: "Mobile App Development with React Native",
    description: "Build cross-platform mobile applications using React Native.",
    thumbnail: "https://images.unsplash.com/photo-1551650975-87deedd944c3?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "Sarah Williams",
    progress: 10,
    total_lectures: 30,
    completed_lectures: 3,
    last_accessed: "2023-06-20T16:20:00Z",
    category: "Mobile Development",
    status: "in_progress",
  },
  {
    id: "course-5",
    title: "Data Structures and Algorithms",
    description: "Master the fundamental data structures and algorithms used in software development.",
    thumbnail: "https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "Michael Brown",
    progress: 45,
    total_lectures: 40,
    completed_lectures: 18,
    last_accessed: "2023-06-17T11:10:00Z",
    category: "Computer Science",
    status: "in_progress",
  },
  {
    id: "course-6",
    title: "Introduction to Artificial Intelligence",
    description: "Learn the basics of AI, machine learning, and neural networks.",
    thumbnail: "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?q=80&w=2065&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    instructor: "Emily Davis",
    progress: 0,
    total_lectures: 28,
    completed_lectures: 0,
    last_accessed: null,
    category: "Artificial Intelligence",
    status: "not_started",
  },
];

// Mock data for upcoming deadlines
const mockUpcomingDeadlines = [
  {
    id: "deadline-1",
    title: "JavaScript Final Project",
    course: "Advanced JavaScript Programming",
    dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days from now
    type: "assignment"
  },
  {
    id: "deadline-2",
    title: "Database Design Quiz",
    course: "Database Design and SQL",
    dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days from now
    type: "quiz"
  },
  {
    id: "deadline-3",
    title: "React Native App Submission",
    course: "Mobile App Development with React Native",
    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now
    type: "project"
  }
];

// Mock data for recent activities
const mockRecentActivities = [
  {
    id: "activity-1",
    type: "completed_lecture",
    course: "Introduction to Web Development",
    title: "CSS Flexbox and Grid",
    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
  },
  {
    id: "activity-2",
    type: "started_course",
    course: "Mobile App Development with React Native",
    title: "Getting Started with React Native",
    timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
  },
  {
    id: "activity-3",
    type: "completed_quiz",
    course: "Advanced JavaScript Programming",
    title: "Promises and Async/Await Quiz",
    timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago
    score: 85,
  },
  {
    id: "activity-4",
    type: "submitted_assignment",
    course: "Database Design and SQL",
    title: "Database Schema Design",
    timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago
  },
];

export default function StudentDashboardPage() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dashboardData, setDashboardData] = useState<{
    stats: {
      totalCourses: number;
      completedCourses: number;
      inProgressCourses: number;
      notStartedCourses: number;
      overallProgress: number;
    };
    recentCourses: EnrolledCourse[];
    upcomingDeadlines: Deadline[];
    recentActivities: ActivityType[];
    progressData: ProgressData[];
    weeklyStudyData: StudyTimeData[];
    subjectDistribution: SubjectDistribution[];
  } | null>(null);

  useEffect(() => {
    // Fetch dashboard data from API
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Fetch data from API
        try {
          const response = await getStudentDashboardData();
          setDashboardData(response.data);
          setLoading(false);
        } catch (apiError) {
          console.error("Error fetching dashboard data from API:", apiError);
          
          // Fallback to mock data if API call fails
          setDashboardData({
            stats: {
              totalCourses: mockEnrolledCourses.length,
              completedCourses: mockEnrolledCourses.filter(course => course.status === "completed").length,
              inProgressCourses: mockEnrolledCourses.filter(course => course.status === "in_progress").length,
              notStartedCourses: mockEnrolledCourses.filter(course => course.status === "not_started").length,
              overallProgress: Math.round(mockEnrolledCourses.reduce((acc, course) => acc + course.progress, 0) / mockEnrolledCourses.length)
            },
            recentCourses: mockEnrolledCourses
              .filter(course => course.last_accessed)
              .sort((a, b) => {
                if (!a.last_accessed) return 1;
                if (!b.last_accessed) return -1;
                return new Date(b.last_accessed).getTime() - new Date(a.last_accessed).getTime();
              })
              .slice(0, 3) as unknown as EnrolledCourse[],
            upcomingDeadlines: mockUpcomingDeadlines as unknown as any[],
            recentActivities: mockRecentActivities as unknown as any[],
            progressData: [
              { month: 'Jan', progress: 10 },
              { month: 'Feb', progress: 25 },
              { month: 'Mar', progress: 30 },
              { month: 'Apr', progress: 45 },
              { month: 'May', progress: 60 },
              { month: 'Jun', progress: 75 },
              { month: 'Jul', progress: 85 },
            ],
            weeklyStudyData: [
              { day: 'Mon', hours: 2.5 },
              { day: 'Tue', hours: 1.8 },
              { day: 'Wed', hours: 3.2 },
              { day: 'Thu', hours: 2.0 },
              { day: 'Fri', hours: 1.5 },
              { day: 'Sat', hours: 4.0 },
              { day: 'Sun', hours: 3.5 },
            ],
            subjectDistribution: [
              { name: 'Web Development', value: 2, color: '#4f46e5' },
              { name: 'Programming', value: 1, color: '#10b981' },
              { name: 'Database', value: 1, color: '#f59e0b' },
              { name: 'Mobile Development', value: 1, color: '#ef4444' },
              { name: 'Computer Science', value: 1, color: '#8b5cf6' },
            ]
          });
          setLoading(false);
        }
      } catch (error) {
        console.error("Error in fetchDashboardData:", error);
        setError("Failed to load dashboard data. Please try again later.");
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, []);

  // Use data from API or fallback to mock data if API call hasn't completed yet
  const stats = dashboardData?.stats || {
    totalCourses: mockEnrolledCourses.length,
    completedCourses: mockEnrolledCourses.filter(
      (course) => course.status === "completed"
    ).length,
    inProgressCourses: mockEnrolledCourses.filter(
      (course) => course.status === "in_progress"
    ).length,
    notStartedCourses: mockEnrolledCourses.filter(
      (course) => course.status === "not_started"
    ).length,
    overallProgress:
      mockEnrolledCourses.length > 0
        ? Math.round(
            mockEnrolledCourses.reduce(
              (acc, course) => acc + course.progress,
              0
            ) / mockEnrolledCourses.length
          )
        : 0
  };
  
  const { totalCourses, completedCourses, inProgressCourses, overallProgress } = stats;
  
  // Get recent courses from API or fallback to mock data
  const recentCourses = dashboardData?.recentCourses || 
    [...mockEnrolledCourses]
      .filter((course) => course.last_accessed)
      .sort((a, b) => {
        if (!a.last_accessed) return 1;
        if (!b.last_accessed) return -1;
        return (
          new Date(b.last_accessed).getTime() - new Date(a.last_accessed).getTime()
        );
      })
      .slice(0, 3);
      
  // Get upcoming deadlines from API or fallback to mock data
  const upcomingDeadlines = dashboardData?.upcomingDeadlines || mockUpcomingDeadlines;
  
  // Get recent activities from API or fallback to mock data
  const recentActivities = dashboardData?.recentActivities || mockRecentActivities;
  
  // Get chart data from API or fallback to mock data
  const progressData = dashboardData?.progressData || [
    { month: 'Jan', progress: 10 },
    { month: 'Feb', progress: 25 },
    { month: 'Mar', progress: 30 },
    { month: 'Apr', progress: 45 },
    { month: 'May', progress: 60 },
    { month: 'Jun', progress: 75 },
    { month: 'Jul', progress: 85 },
  ];
  
  const weeklyStudyData = dashboardData?.weeklyStudyData || [
    { day: 'Mon', hours: 2.5 },
    { day: 'Tue', hours: 1.8 },
    { day: 'Wed', hours: 3.2 },
    { day: 'Thu', hours: 2.0 },
    { day: 'Fri', hours: 1.5 },
    { day: 'Sat', hours: 4.0 },
    { day: 'Sun', hours: 3.5 },
  ];
  
  const subjectDistribution = dashboardData?.subjectDistribution || [
    { name: 'Web Development', value: 2, color: '#4f46e5' },
    { name: 'Programming', value: 1, color: '#10b981' },
    { name: 'Database', value: 1, color: '#f59e0b' },
    { name: 'Mobile Development', value: 1, color: '#ef4444' },
    { name: 'Computer Science', value: 1, color: '#8b5cf6' },
  ];
