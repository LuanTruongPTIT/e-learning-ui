"use client";

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  BookOpen,
  Users,
  FileText,
  Plus,
  Calendar,
  Clock,
  CheckCircle,
  AlertCircle,
  TrendingUp,
  Eye,
  Edit,
  Trash2,
} from "lucide-react";
import Link from "next/link";
import CreateAssignmentModal from "../(dashboard)/teacher/courses/_components/instructor-dashboard/create-assignment-modal";

const demoFeatures = [
  {
    title: "T·∫°o b√†i t·∫≠p ƒëa d·∫°ng",
    description: "H·ªó tr·ª£ t·∫°o quiz online, b√†i t·∫≠p n·ªôp file, ho·∫∑c k·∫øt h·ª£p c·∫£ hai",
    icon: Plus,
    features: [
      "Quiz online v·ªõi th·ªùi gian gi·ªõi h·∫°n",
      "B√†i t·∫≠p n·ªôp file (PDF, DOC, PPT...)",
      "K·∫øt h·ª£p quiz v√† n·ªôp file",
      "T√πy ch·ªçn hi·ªÉn th·ªã ƒë√°p √°n",
      "ƒê√≠nh k√®m file h∆∞·ªõng d·∫´n",
    ],
  },
  {
    title: "Qu·∫£n l√Ω deadline",
    description: "Thi·∫øt l·∫≠p v√† theo d√µi deadline cho t·ª´ng b√†i t·∫≠p",
    icon: Calendar,
    features: [
      "Date-time picker tr·ª±c quan",
      "C·∫£nh b√°o b√†i t·∫≠p s·∫Øp h·∫øt h·∫°n",
      "Ph√¢n lo·∫°i b√†i t·∫≠p theo tr·∫°ng th√°i",
      "T·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i",
      "Th√¥ng b√°o cho h·ªçc sinh",
    ],
  },
  {
    title: "Theo d√µi ti·∫øn ƒë·ªô",
    description: "Gi√°m s√°t vi·ªác n·ªôp b√†i v√† ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa h·ªçc sinh",
    icon: TrendingUp,
    features: [
      "Th·ªëng k√™ s·ªë b√†i ƒë√£ n·ªôp",
      "T·ª∑ l·ªá ho√†n th√†nh theo th·ªùi gian",
      "Danh s√°ch h·ªçc sinh ch∆∞a n·ªôp",
      "Xu·∫•t b√°o c√°o chi ti·∫øt",
      "G·ª≠i nh·∫Øc nh·ªü t·ª± ƒë·ªông",
    ],
  },
  {
    title: "Giao di·ªán th√¢n thi·ªán",
    description: "UI/UX ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë∆°n gi·∫£n v√† tr·ª±c quan",
    icon: Eye,
    features: [
      "Thi·∫øt k·∫ø responsive",
      "T√¨m ki·∫øm v√† l·ªçc nhanh",
      "S·∫Øp x·∫øp theo nhi·ªÅu ti√™u ch√≠",
      "Modal t·∫°o b√†i t·∫≠p ti·ªán l·ª£i",
      "Thao t√°c nhanh v·ªõi dropdown",
    ],
  },
];

const mockAssignments = [
  {
    id: "1",
    title: "B√†i t·∫≠p JavaScript c∆° b·∫£n",
    type: "upload",
    deadline: "15/02/2024 23:59",
    submissions: "18/24",
    status: "active",
    description: "Ho√†n th√†nh c√°c b√†i t·∫≠p v·ªÅ bi·∫øn, h√†m v√† v√≤ng l·∫∑p",
  },
  {
    id: "2",
    title: "Quiz: Ki·∫øn th·ª©c HTML/CSS",
    type: "quiz",
    deadline: "20/02/2024 15:30",
    submissions: "22/24",
    status: "active",
    description: "Ki·ªÉm tra ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ HTML v√† CSS",
    timeLimit: "45 ph√∫t",
  },
  {
    id: "3",
    title: "D·ª± √°n cu·ªëi kh√≥a",
    type: "both",
    deadline: "01/03/2024 23:59",
    submissions: "5/24",
    status: "active",
    description: "X√¢y d·ª±ng website ho√†n ch·ªânh",
    timeLimit: "120 ph√∫t",
  },
];

export default function DemoAssignmentsPage() {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [selectedFeature, setSelectedFeature] = useState<string | null>(null);

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "quiz":
        return "üìù";
      case "upload":
        return "üìÑ";
      case "both":
        return "üîÑ";
      default:
        return "üìã";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active":
        return "bg-green-100 text-green-800";
      case "expired":
        return "bg-red-100 text-red-800";
      case "draft":
        return "bg-yellow-100 text-yellow-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="container mx-auto py-8 max-w-7xl">
      <div className="space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold">Demo: T·∫°o b√†i t·∫≠p cho kh√≥a h·ªçc</h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Kh√°m ph√° t√≠nh nƒÉng t·∫°o v√† qu·∫£n l√Ω b√†i t·∫≠p ƒëa d·∫°ng cho gi·∫£ng vi√™n. 
            H·ªó tr·ª£ quiz online, b√†i t·∫≠p n·ªôp file, v√† qu·∫£n l√Ω deadline hi·ªáu qu·∫£.
          </p>
          <div className="flex justify-center gap-4">
            <Button size="lg" onClick={() => setIsCreateModalOpen(true)}>
              <Plus className="mr-2 h-5 w-5" />
              Th·ª≠ t·∫°o b√†i t·∫≠p
            </Button>
            <Link href="/teacher/courses">
              <Button size="lg" variant="outline">
                <BookOpen className="mr-2 h-5 w-5" />
                ƒê·∫øn trang kh√≥a h·ªçc
              </Button>
            </Link>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">T·ªïng b√†i t·∫≠p</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">3</div>
              <p className="text-xs text-muted-foreground">ƒêang ho·∫°t ƒë·ªông</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">T·ª∑ l·ªá n·ªôp b√†i</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">75%</div>
              <p className="text-xs text-muted-foreground">Trung b√¨nh</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">H·ªçc sinh</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24</div>
              <p className="text-xs text-muted-foreground">ƒê√£ ƒëƒÉng k√Ω</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">S·∫Øp h·∫øt h·∫°n</CardTitle>
              <AlertCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1</div>
              <p className="text-xs text-muted-foreground">Trong 3 ng√†y</p>
            </CardContent>
          </Card>
        </div>

        {/* Features Overview */}
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-3xl font-bold">T√≠nh nƒÉng ch√≠nh</h2>
            <p className="text-muted-foreground mt-2">
              C√¥ng c·ª• to√†n di·ªán cho vi·ªác t·∫°o v√† qu·∫£n l√Ω b√†i t·∫≠p
            </p>
          </div>

          <div className="grid gap-6 md:grid-cols-2">
            {demoFeatures.map((feature) => (
              <Card 
                key={feature.title} 
                className="hover:shadow-lg transition-shadow cursor-pointer"
                onClick={() => setSelectedFeature(selectedFeature === feature.title ? null : feature.title)}
              >
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="p-2 bg-blue-100 rounded-lg">
                        <feature.icon className="h-6 w-6 text-blue-600" />
                      </div>
                      <div>
                        <CardTitle className="text-xl">{feature.title}</CardTitle>
                        <CardDescription className="mt-1">
                          {feature.description}
                        </CardDescription>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  {selectedFeature === feature.title && (
                    <div className="space-y-3 border-t pt-4">
                      <h4 className="font-medium">T√≠nh nƒÉng chi ti·∫øt:</h4>
                      <ul className="space-y-1">
                        {feature.features.map((item, index) => (
                          <li key={index} className="flex items-center gap-2 text-sm">
                            <CheckCircle className="h-3 w-3 text-green-500" />
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Sample Assignments */}
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-3xl font-bold">V√≠ d·ª• b√†i t·∫≠p</h2>
            <p className="text-muted-foreground mt-2">
              C√°c lo·∫°i b√†i t·∫≠p c√≥ th·ªÉ t·∫°o trong h·ªá th·ªëng
            </p>
          </div>

          <div className="grid gap-4">
            {mockAssignments.map((assignment) => (
              <Card key={assignment.id}>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="text-2xl">
                        {getTypeIcon(assignment.type)}
                      </div>
                      <div>
                        <h3 className="font-semibold">{assignment.title}</h3>
                        <p className="text-sm text-muted-foreground">{assignment.description}</p>
                        {assignment.timeLimit && (
                          <div className="flex items-center gap-1 mt-1 text-xs text-blue-600">
                            <Clock className="h-3 w-3" />
                            {assignment.timeLimit}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center gap-4">
                      <div className="text-center">
                        <div className="text-sm font-medium">{assignment.submissions}</div>
                        <div className="text-xs text-muted-foreground">ƒê√£ n·ªôp</div>
                      </div>
                      <div className="text-center">
                        <div className="text-sm font-medium">{assignment.deadline}</div>
                        <div className="text-xs text-muted-foreground">Deadline</div>
                      </div>
                      <Badge className={getStatusColor(assignment.status)}>
                        {assignment.status === "active" ? "ƒêang m·ªü" : "ƒê√£ ƒë√≥ng"}
                      </Badge>
                      <div className="flex gap-1">
                        <Button variant="ghost" size="sm">
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Technical Implementation */}
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl">C·∫•u tr√∫c c∆° s·ªü d·ªØ li·ªáu</CardTitle>
            <CardDescription>
              Thi·∫øt k·∫ø b·∫£ng assignments ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin b√†i t·∫≠p
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 p-4 rounded-lg">
              <pre className="text-sm">
{`CREATE TABLE assignments (
  id VARCHAR(255) PRIMARY KEY,
  course_id VARCHAR(255) NOT NULL,
  lecture_id VARCHAR(255), -- Optional: link to specific lecture
  title VARCHAR(500) NOT NULL,
  description TEXT,
  deadline DATETIME NOT NULL,
  assignment_type ENUM('quiz', 'upload', 'both') DEFAULT 'upload',
  show_answers BOOLEAN DEFAULT FALSE,
  time_limit INT, -- in minutes, for quiz type
  attachment_urls JSON, -- array of file URLs
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  created_by VARCHAR(255) NOT NULL,
  
  FOREIGN KEY (course_id) REFERENCES courses(id),
  FOREIGN KEY (lecture_id) REFERENCES lectures(id),
  FOREIGN KEY (created_by) REFERENCES users(id)
);`}
              </pre>
            </div>
          </CardContent>
        </Card>

        {/* Getting Started */}
        <Card>
          <CardHeader>
            <CardTitle className="text-2xl">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</CardTitle>
            <CardDescription>
              C√°c b∆∞·ªõc ƒë·ªÉ t·∫°o v√† qu·∫£n l√Ω b√†i t·∫≠p hi·ªáu qu·∫£
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    1
                  </div>
                  <div>
                    <h4 className="font-medium">Ch·ªçn lo·∫°i b√†i t·∫≠p</h4>
                    <p className="text-sm text-muted-foreground">
                      Quiz online, n·ªôp file, ho·∫∑c k·∫øt h·ª£p c·∫£ hai t√πy theo m·ª•c ƒë√≠ch h·ªçc t·∫≠p.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    2
                  </div>
                  <div>
                    <h4 className="font-medium">Thi·∫øt l·∫≠p th√¥ng tin</h4>
                    <p className="text-sm text-muted-foreground">
                      Nh·∫≠p ti√™u ƒë·ªÅ, m√¥ t·∫£ chi ti·∫øt v√† ƒë√≠nh k√®m file h∆∞·ªõng d·∫´n n·∫øu c·∫ßn.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    3
                  </div>
                  <div>
                    <h4 className="font-medium">Ch·ªçn deadline</h4>
                    <p className="text-sm text-muted-foreground">
                      S·ª≠ d·ª•ng date-time picker ƒë·ªÉ thi·∫øt l·∫≠p th·ªùi h·∫°n n·ªôp b√†i ch√≠nh x√°c.
                    </p>
                  </div>
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    4
                  </div>
                  <div>
                    <h4 className="font-medium">C·∫•u h√¨nh quiz (n·∫øu c√≥)</h4>
                    <p className="text-sm text-muted-foreground">
                      Thi·∫øt l·∫≠p th·ªùi gian l√†m b√†i v√† t√πy ch·ªçn hi·ªÉn th·ªã ƒë√°p √°n.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    5
                  </div>
                  <div>
                    <h4 className="font-medium">Theo d√µi ti·∫øn ƒë·ªô</h4>
                    <p className="text-sm text-muted-foreground">
                      Gi√°m s√°t vi·ªác n·ªôp b√†i v√† g·ª≠i nh·∫Øc nh·ªü cho h·ªçc sinh ch∆∞a ho√†n th√†nh.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium">
                    6
                  </div>
                  <div>
                    <h4 className="font-medium">ƒê√°nh gi√° v√† ph·∫£n h·ªìi</h4>
                    <p className="text-sm text-muted-foreground">
                      Ch·∫•m ƒëi·ªÉm v√† cung c·∫•p ph·∫£n h·ªìi chi ti·∫øt cho t·ª´ng h·ªçc sinh.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Create Assignment Modal */}
      <CreateAssignmentModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        courseId="demo-course"
        onAssignmentCreated={() => {
          console.log("Demo assignment created!");
        }}
      />
    </div>
  );
}
